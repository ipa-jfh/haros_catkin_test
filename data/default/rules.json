[{"scope": "file", "description": "Strings and /**/-comments should not extend beyond one line.", "tags": ["code-standards", "comments", "strings", "multiline-comments", "multiline-strings", "google-cpp"], "id": "cpplint_plugin:complex_comment", "name": "Complex Multi-line Comments and Strings"}, {"scope": "function", "description": "An if should start on its own line. Avoid constructs such as '} if'.", "tags": ["code-standards", "formatting", "if-else", "google-cpp"], "id": "cpplint_plugin:if_line", "name": "If On Its Own Line"}, {"scope": "file", "description": "Non-ASCII characters should be rare, and must use UTF-8 formatting.", "tags": ["code-standards", "formatting", "character-encoding", "google-cpp"], "id": "cpplint_plugin:non_ascii", "name": "Non-ASCII Characters"}, {"scope": "file", "description": "Do not include non-header files from other packages.", "tags": ["code-standards", "include", "preprocessor", "implementation-files", "google-cpp"], "id": "cpplint_plugin:include_cpp", "name": "Do Not Include Non-header Files"}, {"scope": "file", "description": "Maintainability Index below 20", "tags": ["metrics", "microsoft", "maintainability", "mi", "maintainability-index"], "id": "mi_below_20", "name": "Maintainability Index Below 20"}, {"scope": "function", "description": "Don't use deprecated casting styles.", "tags": ["code-standards", "casting", "deprecation", "google-cpp"], "id": "cpplint_plugin:deprecated_casting", "name": "Deprecated Casting"}, {"scope": "file", "description": "Weighted Methods per Class threshold is [1,n/a]", "tags": ["metrics"], "id": "metric:weighted_methods", "name": "Weighted Methods per Class Threshold"}, {"scope": "file", "description": "Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.", "tags": ["code-standards", "overload", "operators", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosOverrideBinaryOr", "name": "Operator Overload"}, {"scope": "file", "description": "Do not use std::vector<bool>. It does not conform to the requirements of a container.", "tags": ["code-standards", "std-vector", "boolean", "hicpp", "misra-cpp"], "id": "cppcheck_plugin:harosBooleanVector", "name": "No Boolean Vectors"}, {"scope": "file", "description": "Ensure that no expression is redundant.", "tags": ["code-standards", "redundancy", "hicpp"], "id": "cppcheck_plugin:unreadVariable", "name": "No Redundant Variables"}, {"scope": "function", "description": "If an else has a brace on one side, it should have it on both.", "tags": ["code-standards", "formatting", "if-else", "curly-braces", "google-cpp"], "id": "cpplint_plugin:else_braces", "name": "Else Braces"}, {"scope": "file", "description": "Maximum Executable Lines of Code of 50", "tags": ["metrics", "nasa-satc", "his", "eloc", "loc", "lines-of-code"], "id": "max_eloc_50", "name": "Maximum Executable Lines of Code of 50"}, {"scope": "file", "description": "Halstead Bugs above 2", "tags": ["metrics", "verifysoft", "halstead", "bugs", "halstead-bugs"], "id": "halstead_bugs_above_2", "name": "Halstead Bugs Above 2"}, {"scope": "function", "description": "Do not pass a std::unique_ptr by const reference.", "tags": ["code-standards", "pointers", "std-unique-ptr", "const", "references", "hicpp"], "id": "cppcheck_plugin:harosConstUniquePtr", "name": "No unique_ptr by Const Reference"}, {"scope": "file", "description": "Ensure that an enum has a specified base type able to accomodate all its values.", "tags": ["code-standards", "enum", "types", "hicpp"], "id": "cppcheck_plugin:harosEnumWithoutBase", "name": "Enum With No Base Type"}, {"scope": "file", "description": "Do not write code that expects floating point calculations to yield exact results.", "tags": ["code-standards", "floats", "floating-point", "hicpp"], "id": "cppcheck_plugin:harosFloatEquality", "name": "Float Accuracy"}, {"scope": "file", "description": "Halstead's Volume threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:halstead_volume", "name": "Halstead's Volume Threshold"}, {"scope": "function", "description": "Do not use meaningless empty statements.", "tags": ["code-standards", "empty-statement", "ambiguous-code", "google-cpp"], "id": "cpplint_plugin:redundant_empty_statement", "name": "Redundant Empty Statement"}, {"scope": "function", "description": "Avoid non-const reference parameters. Use const or pointers.", "tags": ["code-standards", "parameters", "const", "pointers", "references", "google-cpp"], "id": "cpplint_plugin:non_const_ref", "name": "Avoid Non-const Reference Parameters"}, {"scope": "file", "description": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers", "tags": ["code-standards", "include", "preprocessor", "formatting", "google-cpp"], "id": "cpplint_plugin:include_order", "name": "Include in Order"}, {"scope": "file", "description": "Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.", "tags": ["code-standards", "overload", "operators", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosOverrideComma", "name": "Operator Overload"}, {"scope": "function", "description": "There should be a space after a comma.", "tags": ["code-standards", "formatting", "whitespace", "comma", "google-cpp"], "id": "cpplint_plugin:whitespace_after_comma", "name": "Whitespace After Comma"}, {"scope": "function", "description": "Avoid string printing C functions (sprintf, strcpy, strcat). Use snprintf instead.", "tags": ["code-standards", "deprecation", "library", "strings", "google-cpp"], "id": "cpplint_plugin:c_string_print", "name": "Avoid String Printing C Functions"}, {"scope": "file", "description": "Files should end with a newline character.", "tags": ["code-standards", "formatting", "newline", "end-of-file", "google-cpp", "ros", "ros-cpp"], "id": "cpplint_plugin:newline_terminator", "name": "Newline at End of File"}, {"scope": "file", "description": "Number of Immediate Children threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:number_of_children", "name": "Number of Immediate Children Threshold"}, {"scope": "file", "description": "Uncommented text after", "tags": ["code-standards", "preprocessor", "invalid-code", "google-cpp"], "id": "cpplint_plugin:text_after_endif", "name": "No Text After ENDIF"}, {"scope": "function", "description": "Unary operators should have no whitespace around them.", "tags": ["code-standards", "formatting", "whitespace", "unary-operator", "google-cpp"], "id": "cpplint_plugin:whitespace_unary_op", "name": "Whitespace Around Unary Operator"}, {"scope": "function", "description": "Do not use alternative tokens instead of operators (e.g. 'and', 'or').", "tags": ["code-standards", "tokens", "alternative-tokens", "operators", "google-cpp"], "id": "cpplint_plugin:alternative_tokens", "name": "Alternative Tokens"}, {"scope": "function", "description": "Avoid more than one command per line.", "tags": ["code-standards", "formatting", "google-cpp"], "id": "cpplint_plugin:one_command_per_line", "name": "One Command Per Line"}, {"scope": "file", "description": "Maximum Weighted Methods per Class of 100", "tags": ["metrics", "nasa-satc", "ros", "wmc", "weighted-methods", "methods"], "id": "max_weighted_methods_100", "name": "Maximum Weighted Methods per Class of 100"}, {"scope": "function", "description": "Do not use RValue references.", "tags": ["code-standards", "invalid-code", "rvalue-reference", "google-cpp"], "id": "cpplint_plugin:rvalue_ref", "name": "Avoid Rvalue References"}, {"scope": "class", "description": "All member variables of a class should be initialized after calling the constructor.", "tags": ["code-standards", "classes", "member-variables", "uninitialized-variables", "constructors", "google-cpp", "jsf-av-cpp", "misra-cpp", "hicpp"], "id": "cppcheck_plugin:uninitMemberVar", "name": "No Uninitialized Member Variables"}, {"scope": "function", "description": "The else clause of an else-if clause should be on its own line.", "tags": ["code-standards", "formatting", "if-else", "google-cpp"], "id": "cpplint_plugin:else_if_else_line", "name": "Single Else-If Else Line"}, {"scope": "file", "description": "Methods Available in Class threshold is [1,n/a]", "tags": ["metrics"], "id": "metric:methods_available", "name": "Methods Available in Class Threshold"}, {"scope": "function", "description": "Do not use the verboten C basic types.", "tags": ["code-standards", "types", "deprecation", "google-cpp"], "id": "cpplint_plugin:c_types", "name": "Do Not Use C Types"}, {"scope": "file", "description": "No line should exceed 80 characters in length.", "tags": ["code-standards", "formatting", "line-length", "google-cpp"], "id": "cpplint_plugin:max_line_length_80", "name": "Max. Line Length of 80"}, {"scope": "function", "description": "Do not use throw exception specifications. Use noexcept instead.", "tags": ["code-standards", "deprecation", "cpp11", "exceptions", "throw", "hicpp"], "id": "cppcheck_plugin:harosThrowSpecification", "name": "Use noexcept"}, {"scope": "function", "description": "Do not leave whitespace at the end of a line.", "tags": ["code-standards", "formatting", "whitespace", "google-cpp"], "id": "cpplint_plugin:whitespace_end_line", "name": "Whitespace at the End of Line"}, {"scope": "file", "description": "Indent each block by 2 spaces. Never insert literal tab characters.", "tags": ["code-standards", "formatting", "whitespace", "indentation", "ros", "ros-cpp", "google-cpp"], "id": "cpplint_plugin:two_space_indent", "name": "Indent With 2 Whitespace"}, {"scope": "file", "description": "Every source and header file must contain a license and copyright statement at the beginning of the file.", "tags": ["code-standards", "comments", "license", "copyright", "google-cpp", "ros"], "id": "cpplint_plugin:no_copyright", "name": "No Copyright Statement"}, {"scope": "file", "description": "Fatal for errors which prevented further processing.", "tags": ["code-standards", "pylint"], "id": "pylint_plugin:fatal", "name": "Pylint Fatal Rule"}, {"scope": "function", "description": "Assignment operators should be preceeded and followed by whitespace.", "tags": ["code-standards", "formatting", "whitespace", "assignment", "google-cpp"], "id": "cpplint_plugin:whitespace_assign", "name": "Whitespace Around Assignment"}, {"scope": "file", "description": "Source Lines of Code threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:sloc", "name": "Source Lines of Code Threshold"}, {"scope": "file", "description": "Maximum Executable Lines of Code of 70", "tags": ["metrics", "kth", "ros", "eloc", "loc", "lines-of-code"], "id": "max_eloc_70", "name": "Maximum Executable Lines of Code of 70"}, {"scope": "file", "description": "Maximum Number of Immediate Children of 10", "tags": ["metrics", "unak", "immediate-children", "noc"], "id": "max_immediate_children_10", "name": "Maximum Number of Immediate Children of 10"}, {"scope": "file", "description": "At least two spaces is best between code and comments.", "tags": ["code-standards", "formatting", "whitespace", "comments", "google-cpp"], "id": "cpplint_plugin:whitespace_before_comments", "name": "Whitespace Before Comments"}, {"scope": "function", "description": "Don't use a semicolon to denote an empty statement. Use {} instead.", "tags": ["code-standards", "formatting", "empty-statement", "semicolon", "empty-block", "google-cpp"], "id": "cpplint_plugin:empty_statement", "name": "Empty Semicolon Statement"}, {"scope": "function", "description": "Colons in range-based for loops should be preceeded and followed by a whitespace.", "tags": ["code-standards", "formatting", "whitespace", "colon", "for-loop", "range-based-for", "google-cpp"], "id": "cpplint_plugin:whitespace_colon", "name": "Whitespace Around Colon"}, {"scope": "file", "description": "Deepest Level of Inheritance threshold is [1,n/a]", "tags": ["metrics"], "id": "metric:depth_in_tree", "name": "Deepest Level of Inheritance Threshold"}, {"scope": "function", "description": "Estimated Static Path Count threshold is [1,n/a]", "tags": ["metrics"], "id": "metric:static_path_count", "name": "Estimated Static Path Count Threshold"}, {"scope": "file", "description": "Maximum Function Calls of 10", "tags": ["metrics", "kth", "ros", "function-calls"], "id": "max_function_calls_10", "name": "Maximum Function Calls of 10"}, {"scope": "file", "description": "Do not include the same file twice.", "tags": ["code-standards", "include", "headers", "preprocessor", "google-cpp"], "id": "cpplint_plugin:include_twice", "name": "Do Not Include Twice"}, {"scope": "file", "description": "Include all required headers for what you use.", "tags": ["code-standards", "include", "headers", "preprocessor", "google-cpp"], "id": "cpplint_plugin:include_what_you_use", "name": "Include What You Use"}, {"scope": "file", "description": "Do not use variable-length arrays.", "tags": ["code-standards", "arrays", "variables", "constants", "google-cpp"], "id": "cpplint_plugin:variable_length_array", "name": "Variable Length Arrays"}, {"scope": "file", "description": "No file should mix LF and CRLF line endings.", "tags": ["code-standards", "formatting", "whitespace", "newline"], "id": "cpplint_plugin:line_endings", "name": "Mixed Line Endings"}, {"scope": "function", "description": "Do not use default lambda captures.", "tags": ["code-standards", "invalid-code", "lambda", "default-lambda-capture", "google-cpp"], "id": "cpplint_plugin:default_lambda_captures", "name": "Default Lambda Captures"}, {"scope": "function", "description": "Maximum number of function parameters of 6", "tags": ["code-standards", "functions", "parameters", "hicpp"], "id": "max_function_parameters_6", "name": "Maximum Function Parameters of 6"}, {"scope": "function", "description": "Maximum number of function parameters: 6", "tags": ["code-standards", "functions", "parameters", "hicpp"], "id": "cppcheck_plugin:harosSixParams", "name": "Maximum of 6 Function Parameters"}, {"scope": "class", "description": "DISALLOW macros must be in the private section.", "tags": ["code-standards", "macros", "class", "private", "google-cpp"], "id": "cpplint_plugin:disallow_in_private", "name": "Disallow Macro In Private"}, {"scope": "file", "description": "Maximum Estimated Static Path Count of 250", "tags": ["metrics", "kth", "ros", "static-path"], "id": "max_static_path_250", "name": "Maximum Estimated Static Path Count of 250"}, {"scope": "file", "description": "Lines of Comments threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:comments", "name": "Lines of Comments Threshold"}, {"scope": "function", "description": "You shouldn't have spaces before your brackets, except maybe after 'delete []' or 'return []() {};'", "tags": ["code-standards", "formatting", "whitespace", "brackets", "google-cpp"], "id": "cpplint_plugin:whitespace_before_brackets", "name": "Whitespace Before Brackets"}, {"scope": "file", "description": "The open curly brace is always on its own line.", "tags": ["code-standards", "formatting", "curly-braces", "ros", "ros-cpp"], "id": "cpplint_plugin:opening_brace_line", "name": "Opening Curly Brace On Its Own Line"}, {"scope": "file", "description": "Declarations should be at the smallest feasible scope.", "tags": ["code-standards", "scope", "declarations", "jsf-av-cpp"], "id": "cppcheck_plugin:variableScope", "name": "Smallest Feasible Scope"}, {"scope": "function", "description": "Avoid using variables as format string arguments. Use 'printf(\"%s\", var)' instead.", "tags": ["code-standards", "formatting", "strings", "potential-bugs", "google-cpp"], "id": "cpplint_plugin:format_string_var", "name": "Avoid Format String Variables"}, {"scope": "file", "description": "Do not use the unary operator&.", "tags": ["code-standards", "operators", "overload", "google-cpp"], "id": "cpplint_plugin:unary_and", "name": "operator& Overload"}, {"scope": "file", "description": "Do not include the C standard headers. Use the C++ headers instead.", "tags": ["code-standards", "include", "headers", "preprocessor", "deprecation", "c", "hicpp"], "id": "cpplint_plugin:c_headers", "name": "Avoid C System Headers"}, {"scope": "class", "description": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.", "tags": ["code-standards", "formatting", "whitespace", "access-modifiers", "google-cpp"], "id": "cpplint_plugin:blank_before_section", "name": "Blank Lines Before Section"}, {"scope": "file", "description": "Ensure that no expression is redundant.", "tags": ["code-standards", "redundancy", "hicpp"], "id": "cppcheck_plugin:redundantAssignment", "name": "No Redundant Expressions"}, {"scope": "file", "description": "Maintainability Index threshold is [0,100]", "tags": ["metrics"], "id": "metric:maintainability_index", "name": "Maintainability Index Threshold"}, {"scope": "file", "description": "There shall be no unused variables.", "tags": ["code-standards", "variables", "unused-variables", "misra-cpp"], "id": "cppcheck_plugin:unusedFunction", "name": "No Unused Variables"}, {"scope": "file", "description": "Comment Ratio threshold is [0,1.0]", "tags": ["metrics"], "id": "metric:comment_ratio", "name": "Comment Ratio Threshold"}, {"scope": "file", "description": "The closing curly brace is always on its own line.", "tags": ["code-standards", "formatting", "curly-braces", "ros", "ros-cpp"], "id": "cpplint_plugin:closing_brace_line", "name": "Closing Curly Brace On Its Own Line"}, {"scope": "file", "description": "Maximum Comment Ratio of 30%", "tags": ["metrics", "nasa-satc", "comments", "comment-ratio"], "id": "max_comment_ratio_30", "name": "Maximum Comment Ratio of 30%"}, {"scope": "function", "description": "Do not declare a function as both \"virtual\" and \"override\" or \"final\".", "tags": ["code-standards", "functions", "virtual", "override", "final", "rendundancy", "google-cpp"], "id": "cpplint_plugin:redundant_virtual_decl", "name": "Redundant Virtual Declaration"}, {"scope": "file", "description": "Use one space before comment text.", "tags": ["code-standards", "formatting", "whitespace", "comments", "google-cpp"], "id": "cpplint_plugin:whitespace_before_comment_text", "name": "Whitespace Before Comment Text"}, {"scope": "file", "description": "Do not use const string& members. Use pointers or simple constants instead.", "tags": ["code-standards", "strings", "references", "constants", "google-cpp"], "id": "cpplint_plugin:const_string_ref", "name": "Const String References"}, {"scope": "function", "description": "Non-empty case blocks must not fall through to the next case.", "tags": ["code-standards", "switch", "case", "fall-through", "hicpp"], "id": "cppcheck_plugin:harosCaseWithoutBreak", "name": "Unexpected Case Fall Through"}, {"scope": "file", "description": "Maximum Function Calls of 7", "tags": ["metrics", "his", "function-calls"], "id": "max_function_calls_7", "name": "Maximum Function Calls of 7"}, {"scope": "file", "description": "Number of Delivered Bugs threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:halstead_bugs", "name": "Number of Delivered Bugs Threshold"}, {"scope": "file", "description": "Maintainability Index below 65", "tags": ["metrics", "verifysoft", "maintainability", "mi", "maintainability-index"], "id": "mi_below_65", "name": "Maintainability Index Below 65"}, {"scope": "file", "description": "Maximum Estimated Static Path Count of 80", "tags": ["metrics", "his", "static-path"], "id": "max_static_path_80", "name": "Maximum Estimated Static Path Count of 80"}, {"scope": "function", "description": "There should be a space before a ( when it is preceeded by an if, switch, for or while.", "tags": ["code-standards", "formatting", "whitespace", "parenthesis", "google-cpp"], "id": "cpplint_plugin:whitespace_before_paren_if", "name": "Whitespace Before Parenthesis"}, {"scope": "function", "description": "Number of Distinct Function Calls threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:unique_function_calls", "name": "Number of Distinct Function Calls Threshold"}, {"scope": "file", "description": "Refactor for a 'good practice' metric violation.", "tags": ["code-standards", "pylint"], "id": "pylint_plugin:refactor", "name": "Pylint Refactor Rule"}, {"scope": "function", "description": "Avoid using dangerous addresses, such as addresses from casts, or addresses dereferenced from casts.", "tags": ["code-standards", "potential-bugs", "addresses", "casting", "google-cpp"], "id": "cpplint_plugin:dangerous_addresses", "name": "Avoid Dangerous Addresses"}, {"scope": "file", "description": "Do not use the deprecated register keyword.", "tags": ["code-standards", "deprecation", "register", "cpp11", "hicpp"], "id": "cppcheck_plugin:harosRegisterKeyword", "name": "Do Not Use register"}, {"scope": "function", "description": "Do not declare a function as both \"override\" and \"final\".", "tags": ["code-standards", "functions", "override", "final", "rendundancy", "google-cpp"], "id": "cpplint_plugin:redundant_override_decl", "name": "Redundant Override Declaration"}, {"scope": "function", "description": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.", "tags": ["code-standards", "formatting", "whitespace", "indentation", "if-else", "ambiguous-indentation", "google-cpp"], "id": "cpplint_plugin:if_else_indentation", "name": "Ambiguous If-Else Indentation"}, {"scope": "file", "description": "Do not use deprecated or unconventional string formattings.", "tags": ["code-standards", "strings", "string-formatting", "deprecation", "invalid-code", "google-cpp"], "id": "cpplint_plugin:string_format", "name": "Deprecated String Formatting"}, {"scope": "function", "description": "Do not use default arguments.", "tags": ["code-standards", "functions", "default-arguments", "arguments", "parameters", "hicpp"], "id": "cppcheck_plugin:harosDefaultArguments", "name": "No Default Arguments"}, {"scope": "file", "description": "Convention for coding standard violation.", "tags": ["code-standards", "pylint"], "id": "pylint_plugin:convention", "name": "Pylint Convention Rule"}, {"scope": "file", "description": "Either omit template arguments from make_pair, or use pair directly, or construct a pair directly.", "tags": ["code-standards", "cpp11", "compatibility", "templates", "pair", "google-cpp"], "id": "cpplint_plugin:make_pair_template", "name": "make_pair Template"}, {"scope": "file", "description": "Program Lines of Code threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:ploc", "name": "Program Lines of Code Threshold"}, {"scope": "file", "description": "Inner-style forward declarations are invalid.", "tags": ["code-standards", "invalid-code", "forward-declaration", "google-cpp"], "id": "cpplint_plugin:invalid_forward_declaration", "name": "Invalid Forward Declaration"}, {"scope": "file", "description": "Do not include unapproved C++11 headers.", "tags": ["code-standards", "include", "headers", "preprocessor", "invalid-code", "cpp11", "google-cpp"], "id": "cpplint_plugin:unapproved_headers", "name": "Avoid Unapproved Headers"}, {"scope": "file", "description": "Logical Lines of Code threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:lloc", "name": "Logical Lines of Code Threshold"}, {"scope": "function", "description": "Don't leave spaces before a semicolon at the end of a line.", "tags": ["code-standards", "formatting", "whitespace", "semicolon", "google-cpp"], "id": "cpplint_plugin:whitespace_before_semicolon", "name": "Whitespace Before Semicolon"}, {"scope": "file", "description": "Do not use asm declarations.", "tags": ["code-standards", "assembly", "asm", "hicpp"], "id": "cppcheck_plugin:harosInlineAssembly", "name": "No ASM Declarations"}, {"scope": "file", "description": "Minimum Comment Ratio of 20%", "tags": ["metrics", "nasa-satc", "his", "unak", "ros", "comments", "comment-ratio"], "id": "min_comment_ratio_20", "name": "Minimum Comment Ratio of 20%"}, {"scope": "file", "description": "Maximum Weighted Methods per Class of 50", "tags": ["metrics", "unak", "wmc", "weighted-methods", "methods"], "id": "max_weighted_methods_50", "name": "Maximum Weighted Methods per Class of 50"}, {"scope": "file", "description": "The format of the guard's end should be \"#endif  // &lt;PROJECT&gt;_&lt;PATH&gt;_&lt;FILE&gt;_H_\" or \"#endif  /* &lt;PROJECT&gt;_&lt;PATH&gt;_&lt;FILE&gt;_H_ */\".", "tags": ["code-standards", "header", "header-guard", "preprocessor", "google-cpp"], "id": "cpplint_plugin:header_guard_close", "name": "Header Guard Must Close"}, {"scope": "file", "description": "No line should exceed 120 characters in length.", "tags": ["code-standards", "formatting", "line-length", "ros", "ros-cpp"], "id": "cpplint_plugin:max_line_length_120", "name": "Max. Line Length of 120"}, {"scope": "function", "description": "There should be a space after a semicolon, if it does not end the line.", "tags": ["code-standards", "formatting", "whitespace", "semicolon", "google-cpp"], "id": "cpplint_plugin:whitespace_after_semicolon", "name": "Whitespace After Semicolon"}, {"scope": "file", "description": "Halstead Volume above 8000", "tags": ["metrics", "verifysoft", "halstead", "halstead-volume"], "id": "halstead_volume_above_8000", "name": "Halstead Volume Above 8000"}, {"scope": "file", "description": "Do not use the invalid increment form *count++.", "tags": ["code-standards", "increment", "pointer", "invalid-code", "google-cpp"], "id": "cpplint_plugin:invalid_increment", "name": "Invalid Increment Form"}, {"scope": "file", "description": "Executable Lines of Code threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:eloc", "name": "Executable Lines of Code Threshold"}, {"scope": "file", "description": "Maximum Deepest Level of Inheritance of 5", "tags": ["metrics", "nasa-satc", "unak", "dit", "inheritance"], "id": "max_deepest_inheritance_5", "name": "Maximum Deepest Level of Inheritance of 5"}, {"scope": "function", "description": "Number of Function Parameters threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:function_parameters", "name": "Number of Function Parameters Threshold"}, {"scope": "function", "description": "Do not create an rvalue reference of std::array.", "tags": ["code-standards", "std-array", "rvalue-reference", "hicpp"], "id": "cppcheck_plugin:harosRvalueStdArray", "name": "Array Reference"}, {"scope": "function", "description": "A switch should have at least two cases distinct from the default case.", "tags": ["code-standards", "switch", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosBooleanCase", "name": "At Least Two Cases"}, {"scope": "file", "description": "Multi-line comments must have a terminator.", "tags": ["code-standards", "comments", "invalid-code", "google-cpp"], "id": "cpplint_plugin:comments_must_end", "name": "Multi-line Comments Must End"}, {"scope": "file", "description": "Closing brace should be aligned with the beginning of class or structure.", "tags": ["code-standards", "formatting", "curly-braces", "indentation", "google-cpp"], "id": "cpplint_plugin:close_brace_alignment", "name": "Closing Curly Brace Alignment"}, {"scope": "file", "description": "Wrap use of the C Standard Library.", "tags": ["code-standards", "c", "libraries", "c-standard-library", "hicpp", "misra-cpp"], "id": "cppcheck_plugin:harosUsingErrno", "name": "C Standard Library"}, {"scope": "function", "description": "Maximum number of function lines of code of 40", "tags": ["code-standards", "metrics", "functions", "loc", "lines-of-code", "google-cpp", "verifysoft"], "id": "max_function_length_40", "name": "Maximum Function Length of 40"}, {"scope": "file", "description": "Avoid using thread-unsafe functions, when thread-safe variants are available.", "tags": ["code-standards", "multi-threading", "thread-safety", "google-cpp"], "id": "cpplint_plugin:thread_safe_functions", "name": "Avoid Thread-Unsafe Functions"}, {"scope": "file", "description": "All headers must be protected against multiple inclusion by", "tags": ["code-standards", "header", "header-guard", "preprocessor", "google-cpp", "ros", "ros-cpp"], "id": "cpplint_plugin:header_guard", "name": "No Header Guard"}, {"scope": "file", "description": "Use at most one level of pointer indirection.", "tags": ["code-standards", "pointers", "multiple-pointers", "hicpp"], "id": "cppcheck_plugin:harosDoublePointer", "name": "Pointer Indirection"}, {"scope": "function", "description": "Leave no redundant blank lines in code blocks.", "tags": ["code-standards", "formatting", "whitespace", "functions", "code-blocks", "google-cpp"], "id": "cpplint_plugin:blank_code_line", "name": "No Blank Lines In Code Blocks"}, {"scope": "class", "description": "If copying and assignment are disabled with a macro such as DISALLOW_COPY_AND_ASSIGN, it should be at the end of the private section, and should be the last thing in the class.", "tags": ["code-standards", "macros", "class", "constructors", "google-cpp"], "id": "cpplint_plugin:disallow_macro", "name": "Disallow Macro"}, {"scope": "file", "description": "Cyclomatic Complexity threshold is [1,n/a]", "tags": ["metrics"], "id": "metric:cyclomatic_complexity", "name": "Cyclomatic Complexity Threshold"}, {"scope": "function", "description": "All parameters should be named in a function.", "tags": ["code-standards", "parameters", "functions", "naming", "google-cpp"], "id": "cpplint_plugin:unnamed_params", "name": "Avoid Unnamed Parameters"}, {"scope": "function", "description": "Avoid using literals as the second argument for snprintf.", "tags": ["code-standards", "literals", "potential-bugs", "google-cpp"], "id": "cpplint_plugin:snprintf_args", "name": "snprintf Arguments"}, {"scope": "file", "description": "Do not use unions. Use a safe polymorphic abstraction, instead.", "tags": ["code-standards", "unions", "polymorphism", "type-safety", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosUnion", "name": "No Unions"}, {"scope": "file", "description": "Coupling Between Objects threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:coupling", "name": "Coupling Between Objects Threshold"}, {"scope": "file", "description": "Maximum Methods Available in Class of 20", "tags": ["metrics", "nasa-satc", "ros", "mac", "methods-available", "methods"], "id": "max_methods_available_20", "name": "Maximum Methods Available in Class of 20"}, {"scope": "file", "description": "Maximum number of program lines of code in a file of 400", "tags": ["metrics", "loc", "lines-of-code", "verifysoft"], "id": "max_file_length_400", "name": "Maximum File Length of 400"}, {"scope": "file", "description": "Namespaces should have a comment at the end.", "tags": ["code-standards", "formatting", "comments", "namespace", "google-cpp", "ros", "ros-cpp"], "id": "cpplint_plugin:namespace_end_comment", "name": "End of Namespace Comment"}, {"scope": "file", "description": "Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.", "tags": ["code-standards", "overload", "operators", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosOverrideUnaryAnd", "name": "Operator Overload"}, {"scope": "file", "description": "Maximum Coupling Between Objects of 5", "tags": ["metrics", "nasa-satc", "ros", "coupling", "cbo"], "id": "max_coupling_objects_5", "name": "Maximum Coupling Between Objects of 5"}, {"scope": "file", "description": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.", "tags": ["code-standards", "formatting", "whitespace", "curly-braces", "google-cpp"], "id": "cpplint_plugin:whitespace_open_brace", "name": "Whitespace Before Opening Curly Brace"}, {"scope": "file", "description": "Storage class should come before the type.", "tags": ["code-standards", "invalid-code", "storage-class", "google-cpp"], "id": "cpplint_plugin:storage_before_type", "name": "Storage Class Before Type"}, {"scope": "file", "description": "The format of the symbol name should be &lt;PACKAGE&gt;_&lt;PATH&gt;_&lt;FILE&gt;_H.", "tags": ["code-standards", "header", "header-guard", "preprocessor", "ros", "ros-cpp"], "id": "cpplint_plugin:header_guard_format", "name": "Header Guard Format"}, {"scope": "file", "description": "Do not indent within a namespace.", "tags": ["code-standards", "formatting", "indentation", "namespace", "google-cpp"], "id": "cpplint_plugin:namespace_indent", "name": "No Namespace Indentation"}, {"scope": "file", "description": "Do not rely on the sequence of evaluation within an expression.", "tags": ["code-standards", "evaluation-order", "expressions", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosAssignAssignment", "name": "Order of Evaluation"}, {"scope": "file", "description": "Maximum Nesting of Control Structures of 5", "tags": ["metrics", "kth", "ros", "nesting", "control-structures", "control-flow"], "id": "max_control_nesting_5", "name": "Maximum Nesting of Control Structures of 5"}, {"scope": "file", "description": "Maximum Nesting of Control Structures of 4", "tags": ["metrics", "his", "nesting", "control-structures", "control-flow"], "id": "max_control_nesting_4", "name": "Maximum Nesting of Control Structures of 4"}, {"scope": "file", "description": "Except in if/for/while/switch, there should never be space immediately inside parens (eg \"f( 3, 4 )\"). We make an exception for nested parens ( (a+b) + c ).", "tags": ["code-standards", "formatting", "whitespace", "parenthesis", "google-cpp"], "id": "cpplint_plugin:whitespace_after_paren", "name": "No Whitespace After Parenthesis"}, {"scope": "class", "description": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.", "tags": ["code-standards", "explicit", "constructors", "google-cpp"], "id": "cpplint_plugin:explicit_constructors", "name": "Make Constructors Explicit"}, {"scope": "file", "description": "Use VLOG with a numeric argument.", "tags": ["code-standards", "logging", "library", "google-cpp"], "id": "cpplint_plugin:logging_levels", "name": "Logging Levels"}, {"scope": "function", "description": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.", "tags": ["code-standards", "formatting", "if-else", "single-line-statements", "google-cpp"], "id": "cpplint_plugin:single_if_else", "name": "Single Statement If-Else"}, {"scope": "function", "description": "Nesting of Control Structures threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:nested_control", "name": "Nesting of Control Structures Threshold"}, {"scope": "file", "description": "Maximum Comment Ratio of 40%", "tags": ["metrics", "unak", "comments", "comment-ratio"], "id": "max_comment_ratio_40", "name": "Maximum Comment Ratio of 40%"}, {"scope": "file", "description": "Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.", "tags": ["code-standards", "overload", "operators", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosOverrideBinaryAnd", "name": "Operator Overload"}, {"scope": "file", "description": "Do not use unnamed namespaces in header files.", "tags": ["code-standards", "namespace", "unnamed-namespace", "headers", "google-cpp"], "id": "cpplint_plugin:unnamed_namespace", "name": "Unnamed Namespace"}, {"scope": "file", "description": "In general, every .cc file should have an associated .h file.", "tags": ["code-standards", "header", "include", "preprocessor", "google-cpp"], "id": "cpplint_plugin:include_own_header", "name": "Include Your Own header"}, {"scope": "file", "description": "Include the directory when naming header files.", "tags": ["code-standards", "naming", "headers", "include", "google-cpp"], "id": "cpplint_plugin:dir_in_header", "name": "Include Directory in Header"}, {"scope": "file", "description": "Do not rely on the sequence of evaluation within an expression.", "tags": ["code-standards", "evaluation-order", "expressions", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosAssignIncrement", "name": "Order of Evaluation"}, {"scope": "file", "description": "Do not use integer types directly. Use size-specific typedefs, for instance from &lt;cstdint&gt;.", "tags": ["code-standards", "integer-types", "type-safety", "portability", "hicpp", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosIntegerTypes", "name": "Integer Types"}, {"scope": "file", "description": "Maximum Estimated Static Path Count of 200", "tags": ["metrics", "hicpp", "static-path"], "id": "max_static_path_200", "name": "Maximum Estimated Static Path Count of 200"}, {"scope": "file", "description": "Use C-style strings for static and global string constants.", "tags": ["code-standards", "strings", "constants", "google-cpp"], "id": "cpplint_plugin:string_constants", "name": "C-style String Constants"}, {"scope": "file", "description": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.", "tags": ["code-standards", "formatting", "whitespace", "parenthesis", "google-cpp"], "id": "cpplint_plugin:whitespace_before_paren", "name": "No Whitespace Before Parenthesis"}, {"scope": "file", "description": "Time Required to Program threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:halstead_time", "name": "Time Required to Program Threshold"}, {"scope": "file", "description": "Do not use unapproved C++11 classes and functions.", "tags": ["code-standards", "class", "functions", "invalid-code", "cpp11", "google-cpp"], "id": "cpplint_plugin:unapproved_functions", "name": "Avoid Unapproved Classes and Functions"}, {"scope": "function", "description": "Number of Function Calls threshold is [0,n/a]", "tags": ["metrics"], "id": "metric:function_calls", "name": "Number of Function Calls Threshold"}, {"scope": "class", "description": "Access modifiers should be indented by one space.", "tags": ["code-standards", "formatting", "indentation", "access-modifiers", "google-cpp"], "id": "cpplint_plugin:indent_access_mod", "name": "Indent Access Modifiers"}, {"scope": "file", "description": "Use at most two levels of pointer indirection.", "tags": ["code-standards", "pointers", "multiple-pointers", "misra-cpp", "jsf-av-cpp"], "id": "cppcheck_plugin:harosTriplePointer", "name": "Pointer Indirection"}, {"scope": "function", "description": "The else statement should be on the same line as the preceeding closing brace.", "tags": ["code-standards", "formatting", "whitespace", "if-else", "curly-braces", "google-cpp"], "id": "cpplint_plugin:else_line", "name": "Else Statement Line"}, {"scope": "file", "description": "The open curly brace should almost never be on its own line.", "tags": ["code-standards", "formatting", "curly-braces", "google-cpp"], "id": "cpplint_plugin:opening_curly_brace", "name": "Opening Curly Brace"}, {"scope": "file", "description": "Error for important programming issues (i.e. most probably bug).", "tags": ["code-standards", "pylint"], "id": "pylint_plugin:error", "name": "Pylint Error Rule"}, {"scope": "file", "description": "Maximum Cyclomatic Complexity of 10", "tags": ["metrics", "nasa-satc", "his", "cyclomatic-complexity"], "id": "max_cyclomatic_complexity_10", "name": "Maximum Cyclomatic Complexity of 10"}, {"scope": "file", "description": "To-do comments should look like '// TODO(my_username): Stuff.'.", "tags": ["code-standards", "formatting", "comments", "todo-comment", "google-cpp"], "id": "cpplint_plugin:todo_format", "name": "TODO Comment Format"}, {"scope": "file", "description": "Do not use namespace using-directives. Use using-declarations instead.", "tags": ["code-standards", "namespace", "using-directives", "using-declarations", "google-cpp", "hicpp", "misra-cpp"], "id": "cpplint_plugin:using_directives", "name": "Avoid Namespace Using-Directives"}, {"scope": "file", "description": "Maximum Cyclomatic Complexity of 15", "tags": ["metrics", "kth", "ros", "cyclomatic-complexity"], "id": "max_cyclomatic_complexity_15", "name": "Maximum Cyclomatic Complexity of 15"}, {"scope": "file", "description": "Do not use non-standard or deprecated operators (e.g. &gt;? and &lt;?).", "tags": ["code-standards", "invalid-code", "deprecation", "operators", "google-cpp"], "id": "cpplint_plugin:deprecated_operators", "name": "Do Not Use Deprecated Operators"}, {"scope": "function", "description": "To check for equality, use CHECK_EQ(a, b) instead of CHECK(a == b).", "tags": ["code-standards", "macros", "equality", "google-cpp"], "id": "cpplint_plugin:check_eq", "name": "CHECK_EQ Instead of CHECK"}, {"scope": "function", "description": "do/while clauses should not be on a single line.", "tags": ["code-standards", "formatting", "do-while", "google-cpp"], "id": "cpplint_plugin:do_while_line", "name": "Single Do-While Line"}, {"scope": "file", "description": "There should be a space after a closing brace, if it does not end the line (for instance, '} else {').", "tags": ["code-standards", "formatting", "whitespace", "curly-braces", "google-cpp"], "id": "cpplint_plugin:whitespace_close_brace", "name": "Whitespace After Closing Curly Brace"}, {"scope": "class", "description": "Constructors that require multiple arguments should not be marked explicit.", "tags": ["code-standards", "explicit", "constructors", "google-cpp"], "id": "cpplint_plugin:non_explicit_constructors", "name": "Do Not Make Constructors Explicit"}, {"scope": "file", "description": "Do not use invalid escape sequences.", "tags": ["code-standards", "strings", "escape-sequences", "invalid-code", "google-cpp"], "id": "cpplint_plugin:invalid_escape", "name": "Invalid Escape Sequences"}, {"scope": "file", "description": "Warning for stylistic problems, or minor programming issues.", "tags": ["code-standards", "pylint"], "id": "pylint_plugin:warning", "name": "Pylint Warning Rule"}, {"scope": "file", "description": "Do not use deprecated STL library features.", "tags": ["code-standards", "deprecation", "functions", "hicpp"], "id": "cppcheck_plugin:harosDeprecatedSTL", "name": "Deprecated Functions"}, {"scope": "function", "description": "Binary operators should be preceeded and followed by whitespace.", "tags": ["code-standards", "formatting", "whitespace", "binary-operator", "google-cpp"], "id": "cpplint_plugin:whitespace_binary_op", "name": "Whitespace Around Binary Operator"}, {"scope": "function", "description": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.", "tags": ["code-standards", "formatting", "whitespace", "parenthesis", "google-cpp"], "id": "cpplint_plugin:whitespace_inside_paren", "name": "Whitespace Inside Parenthesis"}]